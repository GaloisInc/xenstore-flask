(* Auto-generated by genflask, do not edit! *)

(* Security Classes *)
module Class = struct
  let xen = 1l
  let domain = 2l
  let domain2 = 3l
  let hvm = 4l
  let mmu = 5l
  let resource = 6l
  let shadow = 7l
  let event = 8l
  let grant = 9l
  let security = 10l
  let ivc = 11l
  let file = 12l
  let domainbuilder = 13l
  let xenstore = 14l

  let class_to_string = [
    (1l, "xen");
    (2l, "domain");
    (3l, "domain2");
    (4l, "hvm");
    (5l, "mmu");
    (6l, "resource");
    (7l, "shadow");
    (8l, "event");
    (9l, "grant");
    (10l, "security");
    (11l, "ivc");
    (12l, "file");
    (13l, "domainbuilder");
    (14l, "xenstore");
  ]
end

(* Permissions *)
module Perm = struct
  let xen__settime = 0x00000001l
  let xen__tbufcontrol = 0x00000002l
  let xen__readconsole = 0x00000004l
  let xen__clearconsole = 0x00000008l
  let xen__perfcontrol = 0x00000010l
  let xen__mtrr_add = 0x00000020l
  let xen__mtrr_del = 0x00000040l
  let xen__mtrr_read = 0x00000080l
  let xen__microcode = 0x00000100l
  let xen__physinfo = 0x00000200l
  let xen__quirk = 0x00000400l
  let xen__writeconsole = 0x00000800l
  let xen__readapic = 0x00001000l
  let xen__writeapic = 0x00002000l
  let xen__privprofile = 0x00004000l
  let xen__nonprivprofile = 0x00008000l
  let xen__kexec = 0x00010000l
  let xen__firmware = 0x00020000l
  let xen__sleep = 0x00040000l
  let xen__frequency = 0x00080000l
  let xen__getidle = 0x00100000l
  let xen__debug = 0x00200000l
  let xen__getcpuinfo = 0x00400000l
  let xen__heap = 0x00800000l
  let xen__pm_op = 0x01000000l
  let xen__mca_op = 0x02000000l
  let xen__lockprof = 0x04000000l
  let xen__cpupool_op = 0x08000000l
  let xen__tmem_op = 0x10000000l
  let xen__tmem_control = 0x20000000l
  let xen__getscheduler = 0x40000000l
  let xen__setscheduler = 0x80000000l

  let domain__setvcpucontext = 0x00000001l
  let domain__pause = 0x00000002l
  let domain__unpause = 0x00000004l
  let domain__resume = 0x00000008l
  let domain__create = 0x00000010l
  let domain__transition = 0x00000020l
  let domain__max_vcpus = 0x00000040l
  let domain__destroy = 0x00000080l
  let domain__setaffinity = 0x00000100l
  let domain__getaffinity = 0x00000200l
  let domain__getscheduler = 0x00000400l
  let domain__getdomaininfo = 0x00000800l
  let domain__getvcpuinfo = 0x00001000l
  let domain__getvcpucontext = 0x00002000l
  let domain__setdomainmaxmem = 0x00004000l
  let domain__setdomainhandle = 0x00008000l
  let domain__setdebugging = 0x00010000l
  let domain__hypercall = 0x00020000l
  let domain__settime = 0x00040000l
  let domain__set_target = 0x00080000l
  let domain__shutdown = 0x00100000l
  let domain__setaddrsize = 0x00200000l
  let domain__getaddrsize = 0x00400000l
  let domain__trigger = 0x00800000l
  let domain__getextvcpucontext = 0x01000000l
  let domain__setextvcpucontext = 0x02000000l
  let domain__getvcpuextstate = 0x04000000l
  let domain__setvcpuextstate = 0x08000000l
  let domain__getpodtarget = 0x10000000l
  let domain__setpodtarget = 0x20000000l
  let domain__set_misc_info = 0x40000000l
  let domain__set_virq_handler = 0x80000000l

  let domain2__relabelfrom = 0x00000001l
  let domain2__relabelto = 0x00000002l
  let domain2__relabelself = 0x00000004l
  let domain2__make_priv_for = 0x00000008l
  let domain2__set_as_target = 0x00000010l
  let domain2__set_cpuid = 0x00000020l
  let domain2__gettsc = 0x00000040l
  let domain2__settsc = 0x00000080l
  let domain2__setscheduler = 0x00000100l
  let domain2__setclaim = 0x00000200l

  let hvm__sethvmc = 0x00000001l
  let hvm__gethvmc = 0x00000002l
  let hvm__setparam = 0x00000004l
  let hvm__getparam = 0x00000008l
  let hvm__pcilevel = 0x00000010l
  let hvm__irqlevel = 0x00000020l
  let hvm__pciroute = 0x00000040l
  let hvm__bind_irq = 0x00000080l
  let hvm__cacheattr = 0x00000100l
  let hvm__trackdirtyvram = 0x00000200l
  let hvm__hvmctl = 0x00000400l
  let hvm__mem_event = 0x00000800l
  let hvm__mem_sharing = 0x00001000l
  let hvm__audit_p2m = 0x00002000l
  let hvm__send_irq = 0x00004000l
  let hvm__share_mem = 0x00008000l
  let hvm__nested = 0x00010000l

  let mmu__map_read = 0x00000001l
  let mmu__map_write = 0x00000002l
  let mmu__pageinfo = 0x00000004l
  let mmu__pagelist = 0x00000008l
  let mmu__adjust = 0x00000010l
  let mmu__stat = 0x00000020l
  let mmu__updatemp = 0x00000040l
  let mmu__physmap = 0x00000080l
  let mmu__pinpage = 0x00000100l
  let mmu__memorymap = 0x00000200l
  let mmu__remote_remap = 0x00000400l
  let mmu__mmuext_op = 0x00000800l
  let mmu__exchange = 0x00001000l
  let mmu__target_hack = 0x00002000l

  let resource__add = 0x00000001l
  let resource__remove = 0x00000002l
  let resource__use = 0x00000004l
  let resource__add_irq = 0x00000008l
  let resource__remove_irq = 0x00000010l
  let resource__add_ioport = 0x00000020l
  let resource__remove_ioport = 0x00000040l
  let resource__add_iomem = 0x00000080l
  let resource__remove_iomem = 0x00000100l
  let resource__stat_device = 0x00000200l
  let resource__add_device = 0x00000400l
  let resource__remove_device = 0x00000800l
  let resource__plug = 0x00001000l
  let resource__unplug = 0x00002000l
  let resource__setup = 0x00004000l

  let shadow__disable = 0x00000001l
  let shadow__enable = 0x00000002l
  let shadow__logdirty = 0x00000004l

  let event__bind = 0x00000001l
  let event__send = 0x00000002l
  let event__status = 0x00000004l
  let event__create = 0x00000008l
  let event__reset = 0x00000010l

  let grant__map_read = 0x00000001l
  let grant__map_write = 0x00000002l
  let grant__unmap = 0x00000004l
  let grant__transfer = 0x00000008l
  let grant__setup = 0x00000010l
  let grant__copy = 0x00000020l
  let grant__query = 0x00000040l

  let security__compute_av = 0x00000001l
  let security__compute_create = 0x00000002l
  let security__compute_member = 0x00000004l
  let security__check_context = 0x00000008l
  let security__load_policy = 0x00000010l
  let security__compute_relabel = 0x00000020l
  let security__compute_user = 0x00000040l
  let security__setenforce = 0x00000080l
  let security__setbool = 0x00000100l
  let security__setsecparam = 0x00000200l
  let security__add_ocontext = 0x00000400l
  let security__del_ocontext = 0x00000800l

  let ivc__send = 0x00000001l

  let file__read = 0x00000001l
  let file__write = 0x00000002l
  let file__create = 0x00000004l
  let file__execute = 0x00000008l

  let domainbuilder__build = 0x00000001l
  let domainbuilder__buildmeasured = 0x00000002l

  let xenstore__create = 0x00000001l
  let xenstore__delete = 0x00000002l
  let xenstore__read = 0x00000004l
  let xenstore__write = 0x00000008l
  let xenstore__chmod = 0x00000010l
  let xenstore__relabelfrom = 0x00000020l
  let xenstore__relabelto = 0x00000040l
  let xenstore__override = 0x00000080l
  let xenstore__bind = 0x00000100l
  let xenstore__transition = 0x00000200l
  let xenstore__introduce = 0x00000400l
  let xenstore__stat = 0x00000800l
  let xenstore__release = 0x00001000l
  let xenstore__resume = 0x00002000l
  let xenstore__chown_from = 0x00004000l
  let xenstore__chown_to = 0x00008000l
  let xenstore__chown_transition = 0x00010000l
  let xenstore__retain_owner = 0x00020000l
  let xenstore__make_priv_for = 0x00040000l
  let xenstore__set_as_target = 0x00080000l
  let xenstore__set_target = 0x00100000l

  let perm_to_string = [
    (1l, [
      (0x00000001l, "settime");
      (0x00000002l, "tbufcontrol");
      (0x00000004l, "readconsole");
      (0x00000008l, "clearconsole");
      (0x00000010l, "perfcontrol");
      (0x00000020l, "mtrr_add");
      (0x00000040l, "mtrr_del");
      (0x00000080l, "mtrr_read");
      (0x00000100l, "microcode");
      (0x00000200l, "physinfo");
      (0x00000400l, "quirk");
      (0x00000800l, "writeconsole");
      (0x00001000l, "readapic");
      (0x00002000l, "writeapic");
      (0x00004000l, "privprofile");
      (0x00008000l, "nonprivprofile");
      (0x00010000l, "kexec");
      (0x00020000l, "firmware");
      (0x00040000l, "sleep");
      (0x00080000l, "frequency");
      (0x00100000l, "getidle");
      (0x00200000l, "debug");
      (0x00400000l, "getcpuinfo");
      (0x00800000l, "heap");
      (0x01000000l, "pm_op");
      (0x02000000l, "mca_op");
      (0x04000000l, "lockprof");
      (0x08000000l, "cpupool_op");
      (0x10000000l, "tmem_op");
      (0x20000000l, "tmem_control");
      (0x40000000l, "getscheduler");
      (0x80000000l, "setscheduler");
    ]);
    (2l, [
      (0x00000001l, "setvcpucontext");
      (0x00000002l, "pause");
      (0x00000004l, "unpause");
      (0x00000008l, "resume");
      (0x00000010l, "create");
      (0x00000020l, "transition");
      (0x00000040l, "max_vcpus");
      (0x00000080l, "destroy");
      (0x00000100l, "setaffinity");
      (0x00000200l, "getaffinity");
      (0x00000400l, "getscheduler");
      (0x00000800l, "getdomaininfo");
      (0x00001000l, "getvcpuinfo");
      (0x00002000l, "getvcpucontext");
      (0x00004000l, "setdomainmaxmem");
      (0x00008000l, "setdomainhandle");
      (0x00010000l, "setdebugging");
      (0x00020000l, "hypercall");
      (0x00040000l, "settime");
      (0x00080000l, "set_target");
      (0x00100000l, "shutdown");
      (0x00200000l, "setaddrsize");
      (0x00400000l, "getaddrsize");
      (0x00800000l, "trigger");
      (0x01000000l, "getextvcpucontext");
      (0x02000000l, "setextvcpucontext");
      (0x04000000l, "getvcpuextstate");
      (0x08000000l, "setvcpuextstate");
      (0x10000000l, "getpodtarget");
      (0x20000000l, "setpodtarget");
      (0x40000000l, "set_misc_info");
      (0x80000000l, "set_virq_handler");
    ]);
    (3l, [
      (0x00000001l, "relabelfrom");
      (0x00000002l, "relabelto");
      (0x00000004l, "relabelself");
      (0x00000008l, "make_priv_for");
      (0x00000010l, "set_as_target");
      (0x00000020l, "set_cpuid");
      (0x00000040l, "gettsc");
      (0x00000080l, "settsc");
      (0x00000100l, "setscheduler");
      (0x00000200l, "setclaim");
    ]);
    (4l, [
      (0x00000001l, "sethvmc");
      (0x00000002l, "gethvmc");
      (0x00000004l, "setparam");
      (0x00000008l, "getparam");
      (0x00000010l, "pcilevel");
      (0x00000020l, "irqlevel");
      (0x00000040l, "pciroute");
      (0x00000080l, "bind_irq");
      (0x00000100l, "cacheattr");
      (0x00000200l, "trackdirtyvram");
      (0x00000400l, "hvmctl");
      (0x00000800l, "mem_event");
      (0x00001000l, "mem_sharing");
      (0x00002000l, "audit_p2m");
      (0x00004000l, "send_irq");
      (0x00008000l, "share_mem");
      (0x00010000l, "nested");
    ]);
    (5l, [
      (0x00000001l, "map_read");
      (0x00000002l, "map_write");
      (0x00000004l, "pageinfo");
      (0x00000008l, "pagelist");
      (0x00000010l, "adjust");
      (0x00000020l, "stat");
      (0x00000040l, "updatemp");
      (0x00000080l, "physmap");
      (0x00000100l, "pinpage");
      (0x00000200l, "memorymap");
      (0x00000400l, "remote_remap");
      (0x00000800l, "mmuext_op");
      (0x00001000l, "exchange");
      (0x00002000l, "target_hack");
    ]);
    (6l, [
      (0x00000001l, "add");
      (0x00000002l, "remove");
      (0x00000004l, "use");
      (0x00000008l, "add_irq");
      (0x00000010l, "remove_irq");
      (0x00000020l, "add_ioport");
      (0x00000040l, "remove_ioport");
      (0x00000080l, "add_iomem");
      (0x00000100l, "remove_iomem");
      (0x00000200l, "stat_device");
      (0x00000400l, "add_device");
      (0x00000800l, "remove_device");
      (0x00001000l, "plug");
      (0x00002000l, "unplug");
      (0x00004000l, "setup");
    ]);
    (7l, [
      (0x00000001l, "disable");
      (0x00000002l, "enable");
      (0x00000004l, "logdirty");
    ]);
    (8l, [
      (0x00000001l, "bind");
      (0x00000002l, "send");
      (0x00000004l, "status");
      (0x00000008l, "create");
      (0x00000010l, "reset");
    ]);
    (9l, [
      (0x00000001l, "map_read");
      (0x00000002l, "map_write");
      (0x00000004l, "unmap");
      (0x00000008l, "transfer");
      (0x00000010l, "setup");
      (0x00000020l, "copy");
      (0x00000040l, "query");
    ]);
    (10l, [
      (0x00000001l, "compute_av");
      (0x00000002l, "compute_create");
      (0x00000004l, "compute_member");
      (0x00000008l, "check_context");
      (0x00000010l, "load_policy");
      (0x00000020l, "compute_relabel");
      (0x00000040l, "compute_user");
      (0x00000080l, "setenforce");
      (0x00000100l, "setbool");
      (0x00000200l, "setsecparam");
      (0x00000400l, "add_ocontext");
      (0x00000800l, "del_ocontext");
    ]);
    (11l, [
      (0x00000001l, "send");
    ]);
    (12l, [
      (0x00000001l, "read");
      (0x00000002l, "write");
      (0x00000004l, "create");
      (0x00000008l, "execute");
    ]);
    (13l, [
      (0x00000001l, "build");
      (0x00000002l, "buildmeasured");
    ]);
    (14l, [
      (0x00000001l, "create");
      (0x00000002l, "delete");
      (0x00000004l, "read");
      (0x00000008l, "write");
      (0x00000010l, "chmod");
      (0x00000020l, "relabelfrom");
      (0x00000040l, "relabelto");
      (0x00000080l, "override");
      (0x00000100l, "bind");
      (0x00000200l, "transition");
      (0x00000400l, "introduce");
      (0x00000800l, "stat");
      (0x00001000l, "release");
      (0x00002000l, "resume");
      (0x00004000l, "chown_from");
      (0x00008000l, "chown_to");
      (0x00010000l, "chown_transition");
      (0x00020000l, "retain_owner");
      (0x00040000l, "make_priv_for");
      (0x00080000l, "set_as_target");
      (0x00100000l, "set_target");
    ]);
  ]
end

(* Initial SIDs *)
module InitialSID = struct
  let xen = 1l
  let dom0 = 2l
  let domxen = 4l
  let domio = 3l
  let unlabeled = 5l
  let security = 6l
  let irq = 9l
  let iomem = 8l
  let ioport = 7l
  let device = 10l
  let xenstore = 11l
  let xenstore_unlabeled = 12l

  let to_string = [
    (1l, "system_u:system_r:xen_t");
    (2l, "system_u:system_r:dom0_t");
    (4l, "system_u:system_r:domxen_t");
    (3l, "system_u:system_r:domio_t");
    (5l, "system_u:system_r:unlabeled_t");
    (6l, "system_u:system_r:security_t");
    (9l, "system_u:object_r:irq_t");
    (8l, "system_u:object_r:iomem_t");
    (7l, "system_u:object_r:ioport_t");
    (10l, "system_u:object_r:device_t");
    (11l, "system_u:object_r:xs_root_t");
    (12l, "system_u:object_r:xs_unlabeled_t");
  ]
end

